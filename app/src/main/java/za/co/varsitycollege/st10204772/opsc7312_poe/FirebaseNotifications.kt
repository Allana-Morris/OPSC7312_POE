package za.co.varsitycollege.st10204772.opsc7312_poe

import android.app.NotificationChannel
import android.app.NotificationManager
import android.content.Context
import android.util.Log
import androidx.core.app.NotificationCompat
import com.google.firebase.messaging.FirebaseMessagingService
import com.google.firebase.messaging.RemoteMessage

class FirebaseNotifications : FirebaseMessagingService() {

    override fun onMessageReceived(remoteMessage: RemoteMessage) {
        // Handle incoming messages
        Log.d(TAG, "From: ${remoteMessage.from}")

        // Check if message contains a data payload
        remoteMessage.data.isNotEmpty().let {
            Log.d(TAG, "Message data payload: ${remoteMessage.data}")
            // Handle data message
            sendNotification(remoteMessage.data["title"], remoteMessage.data["body"])
        }

        // Check if message contains a notification payload
        remoteMessage.notification?.let {
            Log.d(TAG, "Message Notification Body: ${it.body}")
            sendNotification(it.title, it.body)
        }
        // Also if you intend on generating your own notifications as a result of a received FCM
        // message, here is where that should be done. Since the notification is automatically
        // generated by the FirebaseMessagingService, it is recommended that you convert the FCM
        // message body to a Bundle which is then sent as a starting intent to a PendingIntent.
        // The custom notification that you build locally then simply acts as an intermediary
        // between the FCM message and your App.
    }

    private fun sendNotification(title: String?, messageBody: String?) {
        val notificationManager =
            getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager

        // Create a notification channel for Android O and above

            val channelId = "Message_Channel"
            val channelName = "Messages Channel"
            val importance = NotificationManager.IMPORTANCE_DEFAULT
            val channel = NotificationChannel(channelId, channelName, importance)
            notificationManager.createNotificationChannel(channel)


        val notificationBuilder = NotificationCompat.Builder(this, "Message_Channel")
            .setSmallIcon(R.drawable.navbar_match)
            .setContentTitle(title)
            .setContentText(messageBody)
            .setAutoCancel(true)

        notificationManager.notify(0, notificationBuilder.build())
    }

    override fun onNewToken(token: String) {
        super.onNewToken(token)
        // Save the token to shared preferences
        saveTokenToPreferences(token)
    }

    private fun saveTokenToPreferences(token: String) {
        // Assuming you have a SharedPreferences instance set up
        val sharedPreferences = getSharedPreferences("UserSession", Context.MODE_PRIVATE)
        var userID = User().Email
        with(sharedPreferences.edit()) {
            putString("${userID}_fcm_token", token)
            apply()
        }
    }

    companion object {
        private const val TAG = "FirebaseNotification"
    }
}